name: Mixed deploy workflow
# Example with cli
# gh workflow run deploy.yml -f BRANCH=master -f SEMVER=0.0.2 -f ENVIROMENT=Production

on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: 'branch: the name of the branch "where" perform the workflow'
        required: true
        default: master
      SEMVER:
        description: 'semver: in format major.minor.patch'
        required: true
        default: 0.0.2
      ENVIROMENT:
        description: "environment: the target environment where to execute the validatation or deployment"
        required: true
        default: production

jobs:
  config:
    name: Set up variables
    runs-on: ubuntu-latest
    outputs:
      TARGET_ARTIFACT: ${{steps.set-artifact.outputs.TARGET_ARTIFACT}}
      TARGET_URL: ${{steps.set-url.outputs.TARGET_URL}}
    steps:
    - name: Set target artifact name
      id: set-artifact
      run: |
        echo "::set-output name=TARGET_ARTIFACT::$(echo myartifact_${{github.event.inputs.BRANCH}}_${{github.event.inputs.SEMVER}})"

    - name: Set target url
      id: set-url
      shell: bash
      run: |
        token='martcus:${{secrets.ACTIONS_TOKEN}}'
        response=$(curl -u $token https://api.github.com/repos/martcus/devops-in-actions/actions/artifacts)
        id=$(echo $response | jq "[ .artifacts[] | select (.name == \"${{steps.set-artifact.outputs.TARGET_ARTIFACT}}\" and .expired == false) | .id ] | max")
        if [ -z "$id" ]; then
          echo "Artifact ${{steps.target-artifact.outputs.TARGET_ARTIFACT}} not found"
          exit 1
        fi

        url=$(echo $response | jq "[ .artifacts[] | select (.id == $id) | .archive_download_url ][0]" | sed 's/"//;s/"//')
        echo "::set-output name=TARGET_URL::$(echo $url)"
        if [ -z "$url" ]; then
          echo "\$url is empty"
          exit 1
        fi

    - name: Echo Variables
      shell: bash
      if: ${{ always() }}
      run: |
        echo "${{steps.set-artifact.outputs.TARGET_ARTIFACT}}"
        echo "${{steps.set-url.outputs.TARGET_URL}}"

  nix:
    name: Linux Deploy
    runs-on: ubuntu-latest
    needs: [config]
    steps:
      - name: Download target artifact
        id: download
        shell: bash
        run: |
          token='martcus:${{secrets.ACTIONS_TOKEN}}'
          curl -u $token ${{needs.config.outputs.TARGET_URL}} -o "${{needs.config.outputs.TARGET_ARTIFACT}}.zip"

      - name: Check downloaded artifact
        shell: bash
        run: |
          if [ ! -f "${{needs.config.outputs.TARGET_ARTIFACT}}.zip" ]; then
            echo "Error: Artifact not downloaded!"
            exit 2
          fi
          echo "Success: Artifact downloaded!"

      - name: Call script for deploy
        shell: bash
        run: |
          echo "Call script for deploy"

  win:
    name: Windows Deploy
    runs-on: windows-latest
    needs: [config]
    steps:
    - name: Download target artifact
      shell: pwsh
      run: |
         echo "Download target artifact"
         echo ${{needs.config.outputs.TARGET_ARTIFACT}} ${{needs.config.outputs.TARGET_URL}}

    - name: Download target artifact
      id: download
      shell: pwsh
      run: |
        # ref: https://channel9.msdn.com/Blogs/trevor-powershell/Automating-the-GitHub-REST-API-Using-PowerShell
        $Token = 'martcus:${{secrets.ACTIONS_TOKEN}}'
        $Base64Token = [System.Convert]::ToBase64String([char[]]$Token);
        $Headers = @{
          Authorization = 'Basic {0}' -f $Base64Token;
        }
        $Uri = "${{needs.config.outputs.TARGET_URL}}
        Invoke-WebRequest -Headers $Headers -Uri $Uri -Method Get -OutFile "${{needs.config.outputs.TARGET_ARTIFACT}}.zip"
        
    - name: Check downloaded artifact
      shell: pwsh
      run: |
        $exist = Test-Path "${{steps.target-artifact.outputs.TARGET_ARTIFACT}}.zip"
        if ($exist -eq $false) {
          echo "Error: Artifact not downloaded!"
          exit 2
        }
        echo "Success: Artifact downloaded!"

    - name: Call script for deploy
      shell: pwsh
      run: |
        echo "Call script for deploy"
